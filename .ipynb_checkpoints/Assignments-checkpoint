{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "a391fe84",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Integer Variable:\n",
      "Value: 42, Type: <class 'int'>\n",
      "\n",
      "Float Variable:\n",
      "Value: 3.14, Type: <class 'float'>\n",
      "\n",
      "String Variable:\n",
      "Value: 'Hello, WORLD!', Type: <class 'str'>\n",
      "\n",
      "Boolean Variable:\n",
      "Value: True, Type: <class 'bool'>\n"
     ]
    }
   ],
   "source": [
    "#1.Write a program in Jupyter Notebook to declare variables of different data types (integer, float, string, and boolean). Print each variable and its type.\n",
    "integer_var = 42          \n",
    "float_var = 3.14          \n",
    "string_var = \"Hello, WORLD!\"  \n",
    "boolean_var = True        \n",
    "print(\"Integer Variable:\")\n",
    "print(f\"Value: {integer_var}, Type: {type(integer_var)}\\n\")\n",
    "print(\"Float Variable:\")\n",
    "print(f\"Value: {float_var}, Type: {type(float_var)}\\n\")\n",
    "print(\"String Variable:\")\n",
    "print(f\"Value: '{string_var}', Type: {type(string_var)}\\n\")\n",
    "print(\"Boolean Variable:\")\n",
    "print(f\"Value: {boolean_var}, Type: {type(boolean_var)}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "186f5a2a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "List: [10, 20, 30, 40, 50]\n",
      "First element of List: 10\n",
      "Last element of List: 50\n",
      "Slice elements (2nd to 4th): [20, 30, 40]\n",
      "\n",
      "\n",
      "Tuple: ('apple', 'banana', 'cherry', 'date', 'elderberry')\n",
      "Second element of Tuple: banana\n",
      "Last element of Tuple: elderberry\n",
      "Slice elements (3rd to last): ('cherry', 'date', 'elderberry')\n",
      "\n",
      "\n",
      "Dictionary: {'name': 'Alice', 'age': 25, 'city': 'New York', 'country': 'USA', 'hobby': 'reading'}\n",
      "Value of key 'name': Alice\n",
      "Value of key 'hobby': reading\n",
      "Keys of the Dictionary: ['name', 'age', 'city', 'country', 'hobby']\n",
      "Values of the Dictionary: ['Alice', 25, 'New York', 'USA', 'reading']\n"
     ]
    }
   ],
   "source": [
    "#2.Create a List, tuple and Dictionary with 5 elements in it and how to access few elements based on the index. Try  with different examples \n",
    "my_list = [10, 20, 30, 40, 50]\n",
    "print(\"List:\", my_list)\n",
    "print(\"First element of List:\", my_list[0])    \n",
    "print(\"Last element of List:\", my_list[-1])   \n",
    "print(\"Slice elements (2nd to 4th):\", my_list[1:4])  \n",
    "print(\"\\n\")\n",
    "my_tuple = (\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\")\n",
    "print(\"Tuple:\", my_tuple)\n",
    "print(\"Second element of Tuple:\", my_tuple[1])   \n",
    "print(\"Last element of Tuple:\", my_tuple[-1])    \n",
    "print(\"Slice elements (3rd to last):\", my_tuple[2:])  \n",
    "print(\"\\n\")\n",
    "my_dict = {\n",
    "    \"name\": \"Alice\",\n",
    "    \"age\": 25,\n",
    "    \"city\": \"New York\",\n",
    "    \"country\": \"USA\",\n",
    "    \"hobby\": \"reading\"\n",
    "}\n",
    "print(\"Dictionary:\", my_dict)\n",
    "print(\"Value of key 'name':\", my_dict[\"name\"])  \n",
    "print(\"Value of key 'hobby':\", my_dict.get(\"hobby\"))  \n",
    "print(\"Keys of the Dictionary:\", list(my_dict.keys()))  \n",
    "print(\"Values of the Dictionary:\", list(my_dict.values()))  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "15ed12aa",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter marks for Subject 1: 91\n",
      "Enter marks for Subject 2: 93\n",
      "Enter marks for Subject 3: 94\n",
      "Average Marks: 92.67\n",
      "Grade: A\n"
     ]
    }
   ],
   "source": [
    "#3.Write a Python program that takes a student's marks in three subjects as input.\n",
    "#If the average is greater than or equal to 90, print \"Grade: A\".\n",
    "#If the average is between 80 and 89, print \"Grade: B\".\n",
    "#If the average is between 70 and 79, print \"Grade: C\".\n",
    "#Otherwise, print \"Grade: Fail\".\n",
    "try:\n",
    "    subject1 = float(input(\"Enter marks for Subject 1: \"))\n",
    "    subject2 = float(input(\"Enter marks for Subject 2: \"))\n",
    "    subject3 = float(input(\"Enter marks for Subject 3: \"))\n",
    "    average = (subject1 + subject2 + subject3) / 3\n",
    "    if average >= 90:\n",
    "        grade = \"A\"\n",
    "    elif 80 <= average < 90:\n",
    "        grade = \"B\"\n",
    "    elif 70 <= average < 80:\n",
    "        grade = \"C\"\n",
    "    else:\n",
    "        grade = \"Fail\"\n",
    "    print(f\"Average Marks: {average:.2f}\")\n",
    "    print(f\"Grade: {grade}\")\n",
    "except ValueError:\n",
    "    print(\"Invalid input. Please enter numeric values for marks.\")  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "33253803",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter a positive integer: 6\n",
      "The sum of all even numbers between 1 and 6 is: 12\n"
     ]
    }
   ],
   "source": [
    "#4.Write a Python program to calculate the sum of all even numbers between 1 and a given positive integer n\n",
    "def sum_of_even_numbers(n):\n",
    "    if n < 1:\n",
    "        return 0  \n",
    "    total_sum = 0\n",
    "    for i in range(2, n + 1, 2):  \n",
    "        total_sum += i\n",
    "    return total_sum\n",
    "try:\n",
    "    n = int(input(\"Enter a positive integer: \"))\n",
    "    if n <= 0:\n",
    "        print(\"Please enter a positive integer greater than 0.\")\n",
    "    else:\n",
    "        result = sum_of_even_numbers(n)\n",
    "        print(f\"The sum of all even numbers between 1 and {n} is: {result}\")\n",
    "except ValueError:\n",
    "    print(\"Invalid input. Please enter a valid positive integer.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "5d28024c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter a text: Suharshitha\n",
      "Word frequencies:\n",
      "suharshitha: 1\n"
     ]
    }
   ],
   "source": [
    "#5.Write a Python program to calculate the frequency of each word in a given text. Print the words and their corresponding counts\n",
    "from collections import Counter\n",
    "def calculate_word_frequency(text):\n",
    "    words = text.lower().split()\n",
    "    word_count = Counter(words)\n",
    "    print(\"Word frequencies:\")\n",
    "    for word, count in word_count.items():\n",
    "        print(f\"{word}: {count}\")\n",
    "text = input(\"Enter a text: \")\n",
    "calculate_word_frequency(text)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "94953d23",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: nltk in c:\\users\\91767\\anaconda3\\lib\\site-packages (3.8.1)\n",
      "Requirement already satisfied: click in c:\\users\\91767\\anaconda3\\lib\\site-packages (from nltk) (8.0.4)\n",
      "Requirement already satisfied: joblib in c:\\users\\91767\\anaconda3\\lib\\site-packages (from nltk) (1.2.0)\n",
      "Requirement already satisfied: regex>=2021.8.3 in c:\\users\\91767\\anaconda3\\lib\\site-packages (from nltk) (2022.7.9)\n",
      "Requirement already satisfied: tqdm in c:\\users\\91767\\anaconda3\\lib\\site-packages (from nltk) (4.65.0)\n",
      "Requirement already satisfied: colorama in c:\\users\\91767\\anaconda3\\lib\\site-packages (from click->nltk) (0.4.6)\n"
     ]
    }
   ],
   "source": [
    "!pip install nltk\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "ffce0ee2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting spacy\n",
      "  Obtaining dependency information for spacy from https://files.pythonhosted.org/packages/ca/45/7b43e89b30fe73e32fd8b8ab80c407d326761530a88abd823ec8623772a6/spacy-3.8.4-cp311-cp311-win_amd64.whl.metadata\n",
      "  Downloading spacy-3.8.4-cp311-cp311-win_amd64.whl.metadata (27 kB)\n",
      "Collecting spacy-legacy<3.1.0,>=3.0.11 (from spacy)\n",
      "  Obtaining dependency information for spacy-legacy<3.1.0,>=3.0.11 from https://files.pythonhosted.org/packages/c3/55/12e842c70ff8828e34e543a2c7176dac4da006ca6901c9e8b43efab8bc6b/spacy_legacy-3.0.12-py2.py3-none-any.whl.metadata\n",
      "  Using cached spacy_legacy-3.0.12-py2.py3-none-any.whl.metadata (2.8 kB)\n",
      "Collecting spacy-loggers<2.0.0,>=1.0.0 (from spacy)\n",
      "  Obtaining dependency information for spacy-loggers<2.0.0,>=1.0.0 from https://files.pythonhosted.org/packages/33/78/d1a1a026ef3af911159398c939b1509d5c36fe524c7b644f34a5146c4e16/spacy_loggers-1.0.5-py3-none-any.whl.metadata\n",
      "  Using cached spacy_loggers-1.0.5-py3-none-any.whl.metadata (23 kB)\n",
      "Collecting murmurhash<1.1.0,>=0.28.0 (from spacy)\n",
      "  Obtaining dependency information for murmurhash<1.1.0,>=0.28.0 from https://files.pythonhosted.org/packages/de/30/ceb9217cdba72bc0bf8466e373e12e5a42945cc85eda0a7c479e319e07ae/murmurhash-1.0.12-cp311-cp311-win_amd64.whl.metadata\n",
      "  Downloading murmurhash-1.0.12-cp311-cp311-win_amd64.whl.metadata (2.2 kB)\n",
      "Collecting cymem<2.1.0,>=2.0.2 (from spacy)\n",
      "  Obtaining dependency information for cymem<2.1.0,>=2.0.2 from https://files.pythonhosted.org/packages/56/c8/75f75889401b20f4c3a7c5965dda09df42913e904ddc2ffe7ef3bdf25061/cymem-2.0.11-cp311-cp311-win_amd64.whl.metadata\n",
      "  Downloading cymem-2.0.11-cp311-cp311-win_amd64.whl.metadata (8.8 kB)\n",
      "Collecting preshed<3.1.0,>=3.0.2 (from spacy)\n",
      "  Obtaining dependency information for preshed<3.1.0,>=3.0.2 from https://files.pythonhosted.org/packages/e4/fc/78cdbdb79f5d6d45949e72c32445d6c060977ad50a1dcfc0392622165f7c/preshed-3.0.9-cp311-cp311-win_amd64.whl.metadata\n",
      "  Using cached preshed-3.0.9-cp311-cp311-win_amd64.whl.metadata (2.2 kB)\n",
      "Collecting thinc<8.4.0,>=8.3.4 (from spacy)\n",
      "  Obtaining dependency information for thinc<8.4.0,>=8.3.4 from https://files.pythonhosted.org/packages/d9/98/f910b8d8113ab9b955a68e9bbf0d5bd0e828f22dd6d3c226af6ec3970817/thinc-8.3.4-cp311-cp311-win_amd64.whl.metadata\n",
      "  Downloading thinc-8.3.4-cp311-cp311-win_amd64.whl.metadata (15 kB)\n",
      "Collecting wasabi<1.2.0,>=0.9.1 (from spacy)\n",
      "  Obtaining dependency information for wasabi<1.2.0,>=0.9.1 from https://files.pythonhosted.org/packages/06/7c/34330a89da55610daa5f245ddce5aab81244321101614751e7537f125133/wasabi-1.1.3-py3-none-any.whl.metadata\n",
      "  Using cached wasabi-1.1.3-py3-none-any.whl.metadata (28 kB)\n",
      "Collecting srsly<3.0.0,>=2.4.3 (from spacy)\n",
      "  Obtaining dependency information for srsly<3.0.0,>=2.4.3 from https://files.pythonhosted.org/packages/bb/da/657a685f63028dcb00ccdc4ac125ed347c8bff6fa0dab6a9eb3dc45f3223/srsly-2.5.1-cp311-cp311-win_amd64.whl.metadata\n",
      "  Downloading srsly-2.5.1-cp311-cp311-win_amd64.whl.metadata (20 kB)\n",
      "Collecting catalogue<2.1.0,>=2.0.6 (from spacy)\n",
      "  Obtaining dependency information for catalogue<2.1.0,>=2.0.6 from https://files.pythonhosted.org/packages/9e/96/d32b941a501ab566a16358d68b6eb4e4acc373fab3c3c4d7d9e649f7b4bb/catalogue-2.0.10-py3-none-any.whl.metadata\n",
      "  Using cached catalogue-2.0.10-py3-none-any.whl.metadata (14 kB)\n",
      "Collecting weasel<0.5.0,>=0.1.0 (from spacy)\n",
      "  Obtaining dependency information for weasel<0.5.0,>=0.1.0 from https://files.pythonhosted.org/packages/2a/87/abd57374044e1f627f0a905ac33c1a7daab35a3a815abfea4e1bafd3fdb1/weasel-0.4.1-py3-none-any.whl.metadata\n",
      "  Using cached weasel-0.4.1-py3-none-any.whl.metadata (4.6 kB)\n",
      "Collecting typer<1.0.0,>=0.3.0 (from spacy)\n",
      "  Obtaining dependency information for typer<1.0.0,>=0.3.0 from https://files.pythonhosted.org/packages/d0/cc/0a838ba5ca64dc832aa43f727bd586309846b0ffb2ce52422543e6075e8a/typer-0.15.1-py3-none-any.whl.metadata\n",
      "  Using cached typer-0.15.1-py3-none-any.whl.metadata (15 kB)\n",
      "Requirement already satisfied: tqdm<5.0.0,>=4.38.0 in c:\\users\\91767\\anaconda3\\lib\\site-packages (from spacy) (4.65.0)\n",
      "Requirement already satisfied: numpy>=1.19.0 in c:\\users\\91767\\anaconda3\\lib\\site-packages (from spacy) (1.24.3)\n",
      "Requirement already satisfied: requests<3.0.0,>=2.13.0 in c:\\users\\91767\\anaconda3\\lib\\site-packages (from spacy) (2.31.0)\n",
      "Requirement already satisfied: pydantic!=1.8,!=1.8.1,<3.0.0,>=1.7.4 in c:\\users\\91767\\anaconda3\\lib\\site-packages (from spacy) (1.10.8)\n",
      "Requirement already satisfied: jinja2 in c:\\users\\91767\\anaconda3\\lib\\site-packages (from spacy) (3.1.2)\n",
      "Requirement already satisfied: setuptools in c:\\users\\91767\\anaconda3\\lib\\site-packages (from spacy) (68.0.0)\n",
      "Requirement already satisfied: packaging>=20.0 in c:\\users\\91767\\anaconda3\\lib\\site-packages (from spacy) (23.1)\n",
      "Collecting langcodes<4.0.0,>=3.2.0 (from spacy)\n",
      "  Obtaining dependency information for langcodes<4.0.0,>=3.2.0 from https://files.pythonhosted.org/packages/c3/6b/068c2ea7a712bf805c62445bd9e9c06d7340358ef2824150eceac027444b/langcodes-3.5.0-py3-none-any.whl.metadata\n",
      "  Using cached langcodes-3.5.0-py3-none-any.whl.metadata (29 kB)\n",
      "Collecting language-data>=1.2 (from langcodes<4.0.0,>=3.2.0->spacy)\n",
      "  Obtaining dependency information for language-data>=1.2 from https://files.pythonhosted.org/packages/5d/e9/5a5ffd9b286db82be70d677d0a91e4d58f7912bb8dd026ddeeb4abe70679/language_data-1.3.0-py3-none-any.whl.metadata\n",
      "  Using cached language_data-1.3.0-py3-none-any.whl.metadata (4.3 kB)\n",
      "Requirement already satisfied: typing-extensions>=4.2.0 in c:\\users\\91767\\anaconda3\\lib\\site-packages (from pydantic!=1.8,!=1.8.1,<3.0.0,>=1.7.4->spacy) (4.7.1)\n",
      "Requirement already satisfied: charset-normalizer<4,>=2 in c:\\users\\91767\\anaconda3\\lib\\site-packages (from requests<3.0.0,>=2.13.0->spacy) (2.0.4)\n",
      "Requirement already satisfied: idna<4,>=2.5 in c:\\users\\91767\\anaconda3\\lib\\site-packages (from requests<3.0.0,>=2.13.0->spacy) (3.4)\n",
      "Requirement already satisfied: urllib3<3,>=1.21.1 in c:\\users\\91767\\anaconda3\\lib\\site-packages (from requests<3.0.0,>=2.13.0->spacy) (1.26.16)\n",
      "Requirement already satisfied: certifi>=2017.4.17 in c:\\users\\91767\\anaconda3\\lib\\site-packages (from requests<3.0.0,>=2.13.0->spacy) (2023.7.22)\n",
      "Collecting blis<1.3.0,>=1.2.0 (from thinc<8.4.0,>=8.3.4->spacy)\n",
      "  Obtaining dependency information for blis<1.3.0,>=1.2.0 from https://files.pythonhosted.org/packages/c4/d9/b647ef53c33c82c1fa2ed217c5793de551a38fb1e5b2430f59c3ecba4c86/blis-1.2.0-cp311-cp311-win_amd64.whl.metadata\n",
      "  Downloading blis-1.2.0-cp311-cp311-win_amd64.whl.metadata (7.9 kB)\n",
      "Collecting confection<1.0.0,>=0.0.1 (from thinc<8.4.0,>=8.3.4->spacy)\n",
      "  Obtaining dependency information for confection<1.0.0,>=0.0.1 from https://files.pythonhosted.org/packages/0c/00/3106b1854b45bd0474ced037dfe6b73b90fe68a68968cef47c23de3d43d2/confection-0.1.5-py3-none-any.whl.metadata\n",
      "  Using cached confection-0.1.5-py3-none-any.whl.metadata (19 kB)\n",
      "Requirement already satisfied: colorama in c:\\users\\91767\\anaconda3\\lib\\site-packages (from tqdm<5.0.0,>=4.38.0->spacy) (0.4.6)\n",
      "Requirement already satisfied: click>=8.0.0 in c:\\users\\91767\\anaconda3\\lib\\site-packages (from typer<1.0.0,>=0.3.0->spacy) (8.0.4)\n",
      "Collecting shellingham>=1.3.0 (from typer<1.0.0,>=0.3.0->spacy)\n",
      "  Obtaining dependency information for shellingham>=1.3.0 from https://files.pythonhosted.org/packages/e0/f9/0595336914c5619e5f28a1fb793285925a8cd4b432c9da0a987836c7f822/shellingham-1.5.4-py2.py3-none-any.whl.metadata\n",
      "  Using cached shellingham-1.5.4-py2.py3-none-any.whl.metadata (3.5 kB)\n",
      "Collecting rich>=10.11.0 (from typer<1.0.0,>=0.3.0->spacy)\n",
      "  Obtaining dependency information for rich>=10.11.0 from https://files.pythonhosted.org/packages/19/71/39c7c0d87f8d4e6c020a393182060eaefeeae6c01dab6a84ec346f2567df/rich-13.9.4-py3-none-any.whl.metadata\n",
      "  Using cached rich-13.9.4-py3-none-any.whl.metadata (18 kB)\n",
      "Collecting cloudpathlib<1.0.0,>=0.7.0 (from weasel<0.5.0,>=0.1.0->spacy)\n",
      "  Obtaining dependency information for cloudpathlib<1.0.0,>=0.7.0 from https://files.pythonhosted.org/packages/1f/6e/b64600156934dab14cc8b403095a9ea8bd722aad2e775673c68346b76220/cloudpathlib-0.20.0-py3-none-any.whl.metadata\n",
      "  Using cached cloudpathlib-0.20.0-py3-none-any.whl.metadata (14 kB)\n",
      "Requirement already satisfied: smart-open<8.0.0,>=5.2.1 in c:\\users\\91767\\anaconda3\\lib\\site-packages (from weasel<0.5.0,>=0.1.0->spacy) (5.2.1)\n",
      "Requirement already satisfied: MarkupSafe>=2.0 in c:\\users\\91767\\anaconda3\\lib\\site-packages (from jinja2->spacy) (2.1.1)\n",
      "Collecting marisa-trie>=1.1.0 (from language-data>=1.2->langcodes<4.0.0,>=3.2.0->spacy)\n",
      "  Obtaining dependency information for marisa-trie>=1.1.0 from https://files.pythonhosted.org/packages/fc/98/574b4e143e0a2f5f71af8716b6c4a8a46220f75a6e0847ce7d11ee0ba4aa/marisa_trie-1.2.1-cp311-cp311-win_amd64.whl.metadata\n",
      "  Using cached marisa_trie-1.2.1-cp311-cp311-win_amd64.whl.metadata (9.3 kB)\n",
      "Requirement already satisfied: markdown-it-py>=2.2.0 in c:\\users\\91767\\anaconda3\\lib\\site-packages (from rich>=10.11.0->typer<1.0.0,>=0.3.0->spacy) (2.2.0)\n",
      "Requirement already satisfied: pygments<3.0.0,>=2.13.0 in c:\\users\\91767\\anaconda3\\lib\\site-packages (from rich>=10.11.0->typer<1.0.0,>=0.3.0->spacy) (2.15.1)\n",
      "Requirement already satisfied: mdurl~=0.1 in c:\\users\\91767\\anaconda3\\lib\\site-packages (from markdown-it-py>=2.2.0->rich>=10.11.0->typer<1.0.0,>=0.3.0->spacy) (0.1.0)\n",
      "Downloading spacy-3.8.4-cp311-cp311-win_amd64.whl (12.2 MB)\n",
      "   ---------------------------------------- 0.0/12.2 MB ? eta -:--:--\n",
      "   - -------------------------------------- 0.4/12.2 MB 9.2 MB/s eta 0:00:02\n",
      "   ---- ----------------------------------- 1.3/12.2 MB 13.4 MB/s eta 0:00:01\n",
      "   ----- ---------------------------------- 1.7/12.2 MB 13.8 MB/s eta 0:00:01\n",
      "   ------- -------------------------------- 2.2/12.2 MB 11.6 MB/s eta 0:00:01\n",
      "   -------- ------------------------------- 2.7/12.2 MB 12.5 MB/s eta 0:00:01\n",
      "   ------------ --------------------------- 3.7/12.2 MB 13.0 MB/s eta 0:00:01\n",
      "   ------------- -------------------------- 4.1/12.2 MB 13.7 MB/s eta 0:00:01\n",
      "   --------------- ------------------------ 4.7/12.2 MB 12.9 MB/s eta 0:00:01\n",
      "   ----------------- ---------------------- 5.4/12.2 MB 13.3 MB/s eta 0:00:01\n",
      "   -------------------- ------------------- 6.1/12.2 MB 13.5 MB/s eta 0:00:01\n",
      "   --------------------- ------------------ 6.7/12.2 MB 13.4 MB/s eta 0:00:01\n",
      "   ----------------------- ---------------- 7.3/12.2 MB 13.3 MB/s eta 0:00:01\n",
      "   --------------------------- ------------ 8.3/12.2 MB 14.4 MB/s eta 0:00:01\n",
      "   ------------------------------ --------- 9.2/12.2 MB 14.6 MB/s eta 0:00:01\n",
      "   -------------------------------- ------- 9.8/12.2 MB 14.6 MB/s eta 0:00:01\n",
      "   ---------------------------------- ----- 10.6/12.2 MB 14.9 MB/s eta 0:00:01\n",
      "   ------------------------------------ --- 11.3/12.2 MB 14.9 MB/s eta 0:00:01\n",
      "   ---------------------------------------  12.1/12.2 MB 15.2 MB/s eta 0:00:01\n",
      "   ---------------------------------------  12.2/12.2 MB 15.2 MB/s eta 0:00:01\n",
      "   ---------------------------------------- 12.2/12.2 MB 13.9 MB/s eta 0:00:00\n",
      "Using cached catalogue-2.0.10-py3-none-any.whl (17 kB)\n",
      "Downloading cymem-2.0.11-cp311-cp311-win_amd64.whl (39 kB)\n",
      "Using cached langcodes-3.5.0-py3-none-any.whl (182 kB)\n",
      "Downloading murmurhash-1.0.12-cp311-cp311-win_amd64.whl (25 kB)\n",
      "Using cached preshed-3.0.9-cp311-cp311-win_amd64.whl (122 kB)\n",
      "Using cached spacy_legacy-3.0.12-py2.py3-none-any.whl (29 kB)\n",
      "Using cached spacy_loggers-1.0.5-py3-none-any.whl (22 kB)\n",
      "Downloading srsly-2.5.1-cp311-cp311-win_amd64.whl (632 kB)\n",
      "   ---------------------------------------- 0.0/632.6 kB ? eta -:--:--\n",
      "   --------------------------------------  624.6/632.6 kB 19.8 MB/s eta 0:00:01\n",
      "   --------------------------------------- 632.6/632.6 kB 13.2 MB/s eta 0:00:00\n",
      "Downloading thinc-8.3.4-cp311-cp311-win_amd64.whl (1.5 MB)\n",
      "   ---------------------------------------- 0.0/1.5 MB ? eta -:--:--\n",
      "   ------------------------ --------------- 0.9/1.5 MB 19.4 MB/s eta 0:00:01\n",
      "   ---------------------------------------  1.5/1.5 MB 15.7 MB/s eta 0:00:01\n",
      "   ---------------------------------------- 1.5/1.5 MB 13.5 MB/s eta 0:00:00\n",
      "Using cached typer-0.15.1-py3-none-any.whl (44 kB)\n",
      "Using cached wasabi-1.1.3-py3-none-any.whl (27 kB)\n",
      "Using cached weasel-0.4.1-py3-none-any.whl (50 kB)\n",
      "Downloading blis-1.2.0-cp311-cp311-win_amd64.whl (6.2 MB)\n",
      "   ---------------------------------------- 0.0/6.2 MB ? eta -:--:--\n",
      "   ------ --------------------------------- 1.0/6.2 MB 30.7 MB/s eta 0:00:01\n",
      "   ---------- ----------------------------- 1.6/6.2 MB 20.7 MB/s eta 0:00:01\n",
      "   --------------- ------------------------ 2.4/6.2 MB 19.3 MB/s eta 0:00:01\n",
      "   -------------------- ------------------- 3.2/6.2 MB 17.2 MB/s eta 0:00:01\n",
      "   ------------------------- -------------- 3.9/6.2 MB 17.9 MB/s eta 0:00:01\n",
      "   ----------------------------- ---------- 4.6/6.2 MB 16.5 MB/s eta 0:00:01\n",
      "   ------------------------------- -------- 4.9/6.2 MB 15.8 MB/s eta 0:00:01\n",
      "   ----------------------------------- ---- 5.6/6.2 MB 15.4 MB/s eta 0:00:01\n",
      "   ---------------------------------------  6.1/6.2 MB 15.1 MB/s eta 0:00:01\n",
      "   ---------------------------------------  6.2/6.2 MB 14.7 MB/s eta 0:00:01\n",
      "   ---------------------------------------- 6.2/6.2 MB 13.3 MB/s eta 0:00:00\n",
      "Using cached cloudpathlib-0.20.0-py3-none-any.whl (52 kB)\n",
      "Using cached confection-0.1.5-py3-none-any.whl (35 kB)\n",
      "Using cached language_data-1.3.0-py3-none-any.whl (5.4 MB)\n",
      "Using cached rich-13.9.4-py3-none-any.whl (242 kB)\n",
      "Using cached shellingham-1.5.4-py2.py3-none-any.whl (9.8 kB)\n",
      "Using cached marisa_trie-1.2.1-cp311-cp311-win_amd64.whl (152 kB)\n",
      "Installing collected packages: cymem, wasabi, spacy-loggers, spacy-legacy, shellingham, murmurhash, marisa-trie, cloudpathlib, catalogue, blis, srsly, rich, preshed, language-data, typer, langcodes, confection, weasel, thinc, spacy\n",
      "Successfully installed blis-1.2.0 catalogue-2.0.10 cloudpathlib-0.20.0 confection-0.1.5 cymem-2.0.11 langcodes-3.5.0 language-data-1.3.0 marisa-trie-1.2.1 murmurhash-1.0.12 preshed-3.0.9 rich-13.9.4 shellingham-1.5.4 spacy-3.8.4 spacy-legacy-3.0.12 spacy-loggers-1.0.5 srsly-2.5.1 thinc-8.3.4 typer-0.15.1 wasabi-1.1.3 weasel-0.4.1\n"
     ]
    }
   ],
   "source": [
    "!pip install spacy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "29219da3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting en-core-web-sm==3.8.0\n",
      "  Downloading https://github.com/explosion/spacy-models/releases/download/en_core_web_sm-3.8.0/en_core_web_sm-3.8.0-py3-none-any.whl (12.8 MB)\n",
      "     ---------------------------------------- 0.0/12.8 MB ? eta -:--:--\n",
      "     ---------------------------------------- 0.0/12.8 MB ? eta -:--:--\n",
      "     --------------------------------------- 0.0/12.8 MB 435.7 kB/s eta 0:00:30\n",
      "     --------------------------------------- 0.1/12.8 MB 762.6 kB/s eta 0:00:17\n",
      "     -- ------------------------------------- 0.8/12.8 MB 5.1 MB/s eta 0:00:03\n",
      "     ---- ----------------------------------- 1.5/12.8 MB 7.5 MB/s eta 0:00:02\n",
      "     ------- -------------------------------- 2.4/12.8 MB 9.5 MB/s eta 0:00:02\n",
      "     --------- ------------------------------ 3.1/12.8 MB 10.4 MB/s eta 0:00:01\n",
      "     ----------- ---------------------------- 3.6/12.8 MB 11.1 MB/s eta 0:00:01\n",
      "     ------------- -------------------------- 4.4/12.8 MB 11.2 MB/s eta 0:00:01\n",
      "     --------------- ------------------------ 5.0/12.8 MB 11.5 MB/s eta 0:00:01\n",
      "     ----------------- ---------------------- 5.7/12.8 MB 11.8 MB/s eta 0:00:01\n",
      "     -------------------- ------------------- 6.6/12.8 MB 12.0 MB/s eta 0:00:01\n",
      "     ---------------------- ----------------- 7.2/12.8 MB 12.1 MB/s eta 0:00:01\n",
      "     ------------------------ --------------- 7.9/12.8 MB 12.3 MB/s eta 0:00:01\n",
      "     -------------------------- ------------- 8.5/12.8 MB 12.6 MB/s eta 0:00:01\n",
      "     ---------------------------- ----------- 9.1/12.8 MB 12.6 MB/s eta 0:00:01\n",
      "     ------------------------------ --------- 9.7/12.8 MB 13.0 MB/s eta 0:00:01\n",
      "     ------------------------------- ------- 10.3/12.8 MB 13.6 MB/s eta 0:00:01\n",
      "     --------------------------------- ----- 11.1/12.8 MB 14.5 MB/s eta 0:00:01\n",
      "     ----------------------------------- --- 11.7/12.8 MB 14.6 MB/s eta 0:00:01\n",
      "     ------------------------------------- - 12.4/12.8 MB 14.6 MB/s eta 0:00:01\n",
      "     --------------------------------------  12.8/12.8 MB 14.6 MB/s eta 0:00:01\n",
      "     --------------------------------------- 12.8/12.8 MB 13.4 MB/s eta 0:00:00\n",
      "Installing collected packages: en-core-web-sm\n",
      "Successfully installed en-core-web-sm-3.8.0\n",
      "\u001b[38;5;2m[+] Download and installation successful\u001b[0m\n",
      "You can now load the package via spacy.load('en_core_web_sm')\n"
     ]
    }
   ],
   "source": [
    "!python -m spacy download en_core_web_sm"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "63899744",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[nltk_data] Downloading package stopwords to\n",
      "[nltk_data]     C:\\Users\\91767\\AppData\\Roaming\\nltk_data...\n",
      "[nltk_data]   Package stopwords is already up-to-date!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Original Text: This is a simple example to demonstrate text processing with NLTK and SpaCy.\n",
      "Processed Text: simple example demonstrate text processing nltk spacy .\n"
     ]
    }
   ],
   "source": [
    "#6.Write a Python program to using NLTK and Spacy\n",
    "#Convert text to lowercase.\n",
    "#Remove stopwords using NLTK\n",
    "import nltk\n",
    "import spacy\n",
    "from nltk.corpus import stopwords\n",
    "nltk.download('stopwords')\n",
    "nlp = spacy.load(\"en_core_web_sm\")\n",
    "def process_text(text):\n",
    "    doc = nlp(text.lower())\n",
    "    stop_words = set(stopwords.words('english'))\n",
    "    filtered_tokens = [token.text for token in doc if token.text not in stop_words]\n",
    "    return \" \".join(filtered_tokens)\n",
    "if __name__ == \"__main__\":\n",
    "    input_text = \"This is a simple example to demonstrate text processing with NLTK and SpaCy.\"\n",
    "    processed_text = process_text(input_text)\n",
    "    print(\"Original Text:\", input_text)\n",
    "    print(\"Processed Text:\", processed_text)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "bed9aea7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: gensim in c:\\users\\91767\\anaconda3\\lib\\site-packages (4.3.0)\n",
      "Requirement already satisfied: numpy>=1.18.5 in c:\\users\\91767\\anaconda3\\lib\\site-packages (from gensim) (1.24.3)\n",
      "Requirement already satisfied: scipy>=1.7.0 in c:\\users\\91767\\anaconda3\\lib\\site-packages (from gensim) (1.11.1)\n",
      "Requirement already satisfied: smart-open>=1.8.1 in c:\\users\\91767\\anaconda3\\lib\\site-packages (from gensim) (5.2.1)\n",
      "Collecting FuzzyTM>=0.4.0 (from gensim)\n",
      "  Obtaining dependency information for FuzzyTM>=0.4.0 from https://files.pythonhosted.org/packages/2d/30/074bac7a25866a2807c1005c7852c0139ac22ba837871fc01f16df29b9dc/FuzzyTM-2.0.9-py3-none-any.whl.metadata\n",
      "  Downloading FuzzyTM-2.0.9-py3-none-any.whl.metadata (7.9 kB)\n",
      "Requirement already satisfied: pandas in c:\\users\\91767\\anaconda3\\lib\\site-packages (from FuzzyTM>=0.4.0->gensim) (2.0.3)\n",
      "Collecting pyfume (from FuzzyTM>=0.4.0->gensim)\n",
      "  Obtaining dependency information for pyfume from https://files.pythonhosted.org/packages/ed/ea/a3b120e251145dcdb10777f2bc5f18b1496fd999d705a178c1b0ad947ce1/pyFUME-0.3.4-py3-none-any.whl.metadata\n",
      "  Downloading pyFUME-0.3.4-py3-none-any.whl.metadata (9.7 kB)\n",
      "Requirement already satisfied: python-dateutil>=2.8.2 in c:\\users\\91767\\anaconda3\\lib\\site-packages (from pandas->FuzzyTM>=0.4.0->gensim) (2.8.2)\n",
      "Requirement already satisfied: pytz>=2020.1 in c:\\users\\91767\\anaconda3\\lib\\site-packages (from pandas->FuzzyTM>=0.4.0->gensim) (2023.3.post1)\n",
      "Requirement already satisfied: tzdata>=2022.1 in c:\\users\\91767\\anaconda3\\lib\\site-packages (from pandas->FuzzyTM>=0.4.0->gensim) (2023.3)\n",
      "Collecting scipy>=1.7.0 (from gensim)\n",
      "  Obtaining dependency information for scipy>=1.7.0 from https://files.pythonhosted.org/packages/65/76/903324159e4a3566e518c558aeb21571d642f781d842d8dd0fd9c6b0645a/scipy-1.10.1-cp311-cp311-win_amd64.whl.metadata\n",
      "  Downloading scipy-1.10.1-cp311-cp311-win_amd64.whl.metadata (58 kB)\n",
      "     ---------------------------------------- 0.0/59.0 kB ? eta -:--:--\n",
      "     ------------- ------------------------ 20.5/59.0 kB 330.3 kB/s eta 0:00:01\n",
      "     -------------------------------------- 59.0/59.0 kB 786.1 kB/s eta 0:00:00\n",
      "Collecting numpy>=1.18.5 (from gensim)\n",
      "  Obtaining dependency information for numpy>=1.18.5 from https://files.pythonhosted.org/packages/d8/ec/ebef2f7d7c28503f958f0f8b992e7ce606fb74f9e891199329d5f5f87404/numpy-1.24.4-cp311-cp311-win_amd64.whl.metadata\n",
      "  Downloading numpy-1.24.4-cp311-cp311-win_amd64.whl.metadata (5.6 kB)\n",
      "Collecting simpful==2.12.0 (from pyfume->FuzzyTM>=0.4.0->gensim)\n",
      "  Obtaining dependency information for simpful==2.12.0 from https://files.pythonhosted.org/packages/9d/0e/aebc2fb0b0f481994179b2ee2b8e6bbf0894d971594688c018375e7076ea/simpful-2.12.0-py3-none-any.whl.metadata\n",
      "  Downloading simpful-2.12.0-py3-none-any.whl.metadata (4.8 kB)\n",
      "Collecting fst-pso==1.8.1 (from pyfume->FuzzyTM>=0.4.0->gensim)\n",
      "  Downloading fst-pso-1.8.1.tar.gz (18 kB)\n",
      "  Preparing metadata (setup.py): started\n",
      "  Preparing metadata (setup.py): finished with status 'done'\n",
      "Collecting pandas (from FuzzyTM>=0.4.0->gensim)\n",
      "  Obtaining dependency information for pandas from https://files.pythonhosted.org/packages/da/6d/1235da14daddaa6e47f74ba0c255358f0ce7a6ee05da8bf8eb49161aa6b5/pandas-1.5.3-cp311-cp311-win_amd64.whl.metadata\n",
      "  Downloading pandas-1.5.3-cp311-cp311-win_amd64.whl.metadata (12 kB)\n",
      "Collecting miniful (from fst-pso==1.8.1->pyfume->FuzzyTM>=0.4.0->gensim)\n",
      "  Downloading miniful-0.0.6.tar.gz (2.8 kB)\n",
      "  Preparing metadata (setup.py): started\n",
      "  Preparing metadata (setup.py): finished with status 'done'\n",
      "Requirement already satisfied: six>=1.5 in c:\\users\\91767\\anaconda3\\lib\\site-packages (from python-dateutil>=2.8.2->pandas->FuzzyTM>=0.4.0->gensim) (1.16.0)\n",
      "Downloading FuzzyTM-2.0.9-py3-none-any.whl (31 kB)\n",
      "Downloading pyFUME-0.3.4-py3-none-any.whl (60 kB)\n",
      "   ---------------------------------------- 0.0/60.3 kB ? eta -:--:--\n",
      "   ---------------------------------------- 60.3/60.3 kB 3.1 MB/s eta 0:00:00\n",
      "Downloading numpy-1.24.4-cp311-cp311-win_amd64.whl (14.8 MB)\n",
      "   ---------------------------------------- 0.0/14.8 MB ? eta -:--:--\n",
      "   - -------------------------------------- 0.6/14.8 MB 18.9 MB/s eta 0:00:01\n",
      "   --- ------------------------------------ 1.5/14.8 MB 15.4 MB/s eta 0:00:01\n",
      "   ----- ---------------------------------- 2.1/14.8 MB 18.9 MB/s eta 0:00:01\n",
      "   ------- -------------------------------- 2.9/14.8 MB 15.4 MB/s eta 0:00:01\n",
      "   --------- ------------------------------ 3.5/14.8 MB 15.9 MB/s eta 0:00:01\n",
      "   ----------- ---------------------------- 4.3/14.8 MB 16.2 MB/s eta 0:00:01\n",
      "   ------------- -------------------------- 5.0/14.8 MB 16.0 MB/s eta 0:00:01\n",
      "   --------------- ------------------------ 5.7/14.8 MB 15.8 MB/s eta 0:00:01\n",
      "   ---------------- ----------------------- 6.3/14.8 MB 15.4 MB/s eta 0:00:01\n",
      "   ------------------ --------------------- 7.0/14.8 MB 15.4 MB/s eta 0:00:01\n",
      "   -------------------- ------------------- 7.6/14.8 MB 15.2 MB/s eta 0:00:01\n",
      "   ---------------------- ----------------- 8.4/14.8 MB 15.4 MB/s eta 0:00:01\n",
      "   ------------------------ --------------- 9.0/14.8 MB 15.1 MB/s eta 0:00:01\n",
      "   -------------------------- ------------- 9.7/14.8 MB 15.1 MB/s eta 0:00:01\n",
      "   --------------------------- ------------ 10.4/14.8 MB 14.9 MB/s eta 0:00:01\n",
      "   ----------------------------- ---------- 11.0/14.8 MB 15.2 MB/s eta 0:00:01\n",
      "   ------------------------------- -------- 11.7/14.8 MB 14.9 MB/s eta 0:00:01\n",
      "   --------------------------------- ------ 12.4/14.8 MB 15.2 MB/s eta 0:00:01\n",
      "   ----------------------------------- ---- 13.1/14.8 MB 14.9 MB/s eta 0:00:01\n",
      "   ------------------------------------ --- 13.6/14.8 MB 14.9 MB/s eta 0:00:01\n",
      "   -------------------------------------- - 14.3/14.8 MB 14.9 MB/s eta 0:00:01\n",
      "   ---------------------------------------  14.8/14.8 MB 14.9 MB/s eta 0:00:01\n",
      "   ---------------------------------------  14.8/14.8 MB 14.9 MB/s eta 0:00:01\n",
      "   ---------------------------------------- 14.8/14.8 MB 13.1 MB/s eta 0:00:00\n",
      "Downloading scipy-1.10.1-cp311-cp311-win_amd64.whl (42.2 MB)\n",
      "   ---------------------------------------- 0.0/42.2 MB ? eta -:--:--\n",
      "    --------------------------------------- 0.8/42.2 MB 23.4 MB/s eta 0:00:02\n",
      "   - -------------------------------------- 1.7/42.2 MB 26.8 MB/s eta 0:00:02\n",
      "   -- ------------------------------------- 2.3/42.2 MB 18.0 MB/s eta 0:00:03\n",
      "   -- ------------------------------------- 3.0/42.2 MB 17.2 MB/s eta 0:00:03\n",
      "   --- ------------------------------------ 3.7/42.2 MB 16.7 MB/s eta 0:00:03\n",
      "   ---- ----------------------------------- 4.4/42.2 MB 17.4 MB/s eta 0:00:03\n",
      "   ---- ----------------------------------- 4.8/42.2 MB 16.0 MB/s eta 0:00:03\n",
      "   ---- ----------------------------------- 5.2/42.2 MB 15.0 MB/s eta 0:00:03\n",
      "   ----- ---------------------------------- 6.1/42.2 MB 15.6 MB/s eta 0:00:03\n",
      "   ------ --------------------------------- 6.8/42.2 MB 15.5 MB/s eta 0:00:03\n",
      "   ------- -------------------------------- 7.4/42.2 MB 15.3 MB/s eta 0:00:03\n",
      "   ------- -------------------------------- 8.1/42.2 MB 15.2 MB/s eta 0:00:03\n",
      "   -------- ------------------------------- 8.8/42.2 MB 15.6 MB/s eta 0:00:03\n",
      "   -------- ------------------------------- 9.5/42.2 MB 15.2 MB/s eta 0:00:03\n",
      "   --------- ------------------------------ 10.1/42.2 MB 15.3 MB/s eta 0:00:03\n",
      "   ---------- ----------------------------- 10.8/42.2 MB 14.9 MB/s eta 0:00:03\n",
      "   ---------- ----------------------------- 11.5/42.2 MB 14.2 MB/s eta 0:00:03\n",
      "   ----------- ---------------------------- 12.3/42.2 MB 14.2 MB/s eta 0:00:03\n",
      "   ------------ --------------------------- 13.0/42.2 MB 14.6 MB/s eta 0:00:03\n",
      "   ------------ --------------------------- 13.7/42.2 MB 14.6 MB/s eta 0:00:02\n",
      "   ------------- -------------------------- 14.3/42.2 MB 14.2 MB/s eta 0:00:02\n",
      "   -------------- ------------------------- 15.0/42.2 MB 14.6 MB/s eta 0:00:02\n",
      "   -------------- ------------------------- 15.6/42.2 MB 15.2 MB/s eta 0:00:02\n",
      "   --------------- ------------------------ 16.4/42.2 MB 14.9 MB/s eta 0:00:02\n",
      "   ---------------- ----------------------- 17.1/42.2 MB 14.6 MB/s eta 0:00:02\n",
      "   ---------------- ----------------------- 17.7/42.2 MB 14.6 MB/s eta 0:00:02\n",
      "   ----------------- ---------------------- 18.4/42.2 MB 14.6 MB/s eta 0:00:02\n",
      "   ------------------ --------------------- 19.1/42.2 MB 14.6 MB/s eta 0:00:02\n",
      "   ------------------ --------------------- 19.8/42.2 MB 14.5 MB/s eta 0:00:02\n",
      "   ------------------- -------------------- 20.4/42.2 MB 14.9 MB/s eta 0:00:02\n",
      "   ------------------- -------------------- 21.1/42.2 MB 14.9 MB/s eta 0:00:02\n",
      "   -------------------- ------------------- 21.6/42.2 MB 14.5 MB/s eta 0:00:02\n",
      "   --------------------- ------------------ 22.5/42.2 MB 14.9 MB/s eta 0:00:02\n",
      "   ---------------------- ----------------- 23.2/42.2 MB 14.9 MB/s eta 0:00:02\n",
      "   ---------------------- ----------------- 24.0/42.2 MB 14.6 MB/s eta 0:00:02\n",
      "   ----------------------- ---------------- 24.7/42.2 MB 14.9 MB/s eta 0:00:02\n",
      "   ----------------------- ---------------- 25.3/42.2 MB 14.5 MB/s eta 0:00:02\n",
      "   ------------------------ --------------- 25.9/42.2 MB 14.9 MB/s eta 0:00:02\n",
      "   ------------------------- -------------- 26.6/42.2 MB 14.6 MB/s eta 0:00:02\n",
      "   ------------------------- -------------- 26.9/42.2 MB 14.2 MB/s eta 0:00:02\n",
      "   ------------------------- -------------- 27.4/42.2 MB 13.9 MB/s eta 0:00:02\n",
      "   -------------------------- ------------- 27.7/42.2 MB 13.4 MB/s eta 0:00:02\n",
      "   -------------------------- ------------- 27.9/42.2 MB 13.1 MB/s eta 0:00:02\n",
      "   -------------------------- ------------- 28.4/42.2 MB 12.6 MB/s eta 0:00:02\n",
      "   --------------------------- ------------ 29.0/42.2 MB 12.6 MB/s eta 0:00:02\n",
      "   ---------------------------- ----------- 29.7/42.2 MB 12.6 MB/s eta 0:00:01\n",
      "   ---------------------------- ----------- 30.5/42.2 MB 12.8 MB/s eta 0:00:01\n",
      "   ----------------------------- ---------- 31.3/42.2 MB 12.6 MB/s eta 0:00:01\n",
      "   ------------------------------ --------- 32.2/42.2 MB 12.8 MB/s eta 0:00:01\n",
      "   ------------------------------- -------- 32.8/42.2 MB 12.8 MB/s eta 0:00:01\n",
      "   ------------------------------- -------- 33.5/42.2 MB 12.8 MB/s eta 0:00:01\n",
      "   -------------------------------- ------- 34.2/42.2 MB 12.8 MB/s eta 0:00:01\n",
      "   --------------------------------- ------ 34.9/42.2 MB 12.8 MB/s eta 0:00:01\n",
      "   --------------------------------- ------ 35.5/42.2 MB 12.9 MB/s eta 0:00:01\n",
      "   ---------------------------------- ----- 36.2/42.2 MB 12.8 MB/s eta 0:00:01\n",
      "   ---------------------------------- ----- 36.9/42.2 MB 12.8 MB/s eta 0:00:01\n",
      "   ----------------------------------- ---- 37.5/42.2 MB 13.1 MB/s eta 0:00:01\n",
      "   ------------------------------------ --- 38.1/42.2 MB 14.2 MB/s eta 0:00:01\n",
      "   ------------------------------------ --- 38.8/42.2 MB 14.6 MB/s eta 0:00:01\n",
      "   ------------------------------------- -- 39.4/42.2 MB 14.9 MB/s eta 0:00:01\n",
      "   ------------------------------------- -- 39.9/42.2 MB 14.9 MB/s eta 0:00:01\n",
      "   -------------------------------------- - 40.3/42.2 MB 14.2 MB/s eta 0:00:01\n",
      "   -------------------------------------- - 40.7/42.2 MB 13.6 MB/s eta 0:00:01\n",
      "   ---------------------------------------  41.6/42.2 MB 14.6 MB/s eta 0:00:01\n",
      "   ---------------------------------------  42.2/42.2 MB 14.2 MB/s eta 0:00:01\n",
      "   ---------------------------------------  42.2/42.2 MB 14.2 MB/s eta 0:00:01\n",
      "   ---------------------------------------  42.2/42.2 MB 14.2 MB/s eta 0:00:01\n",
      "   ---------------------------------------  42.2/42.2 MB 14.2 MB/s eta 0:00:01\n",
      "   ---------------------------------------  42.2/42.2 MB 14.2 MB/s eta 0:00:01\n",
      "   ---------------------------------------- 42.2/42.2 MB 9.9 MB/s eta 0:00:00\n",
      "Downloading pandas-1.5.3-cp311-cp311-win_amd64.whl (10.3 MB)\n",
      "   ---------------------------------------- 0.0/10.3 MB ? eta -:--:--\n",
      "   --- ------------------------------------ 0.8/10.3 MB 17.9 MB/s eta 0:00:01\n",
      "   ----- ---------------------------------- 1.4/10.3 MB 17.2 MB/s eta 0:00:01\n",
      "   ------ --------------------------------- 1.7/10.3 MB 12.2 MB/s eta 0:00:01\n",
      "   --------- ------------------------------ 2.4/10.3 MB 14.2 MB/s eta 0:00:01\n",
      "   ----------- ---------------------------- 2.9/10.3 MB 13.4 MB/s eta 0:00:01\n",
      "   -------------- ------------------------- 3.8/10.3 MB 14.2 MB/s eta 0:00:01\n",
      "   ------------------ --------------------- 4.6/10.3 MB 14.1 MB/s eta 0:00:01\n",
      "   --------------------- ------------------ 5.5/10.3 MB 14.1 MB/s eta 0:00:01\n",
      "   ------------------------ --------------- 6.3/10.3 MB 14.4 MB/s eta 0:00:01\n",
      "   --------------------------- ------------ 7.0/10.3 MB 14.9 MB/s eta 0:00:01\n",
      "   ----------------------------- ---------- 7.6/10.3 MB 14.7 MB/s eta 0:00:01\n",
      "   -------------------------------- ------- 8.3/10.3 MB 14.7 MB/s eta 0:00:01\n",
      "   ---------------------------------- ----- 9.0/10.3 MB 14.7 MB/s eta 0:00:01\n",
      "   ------------------------------------- -- 9.5/10.3 MB 14.5 MB/s eta 0:00:01\n",
      "   ---------------------------------------  10.3/10.3 MB 14.9 MB/s eta 0:00:01\n",
      "   ---------------------------------------  10.3/10.3 MB 14.6 MB/s eta 0:00:01\n",
      "   ---------------------------------------- 10.3/10.3 MB 13.6 MB/s eta 0:00:00\n",
      "Downloading simpful-2.12.0-py3-none-any.whl (24 kB)\n",
      "Building wheels for collected packages: fst-pso, miniful\n",
      "  Building wheel for fst-pso (setup.py): started\n",
      "  Building wheel for fst-pso (setup.py): finished with status 'done'\n",
      "  Created wheel for fst-pso: filename=fst_pso-1.8.1-py3-none-any.whl size=20448 sha256=0d342b459c4d20fcd719790c7c8978e915ad892ef93cc3120c1d1529aeba0934\n",
      "  Stored in directory: c:\\users\\91767\\appdata\\local\\pip\\cache\\wheels\\69\\f5\\e5\\18ad53fe1ed6b2af9fad05ec052e4acbac8e92441df44bad2e\n",
      "  Building wheel for miniful (setup.py): started\n",
      "  Building wheel for miniful (setup.py): finished with status 'done'\n",
      "  Created wheel for miniful: filename=miniful-0.0.6-py3-none-any.whl size=3522 sha256=fa83413a04b48196b512d235f89037a77ec52c915ee6807a43c880924be2b023\n",
      "  Stored in directory: c:\\users\\91767\\appdata\\local\\pip\\cache\\wheels\\9d\\ff\\2f\\afe4cd56f47de147407705626517d68bea0f3b74eb1fb168e6\n",
      "Successfully built fst-pso miniful\n",
      "Installing collected packages: numpy, scipy, pandas, simpful, miniful, fst-pso, pyfume, FuzzyTM\n",
      "  Attempting uninstall: numpy\n",
      "    Found existing installation: numpy 1.24.3\n",
      "    Uninstalling numpy-1.24.3:\n",
      "      Successfully uninstalled numpy-1.24.3\n",
      "  Attempting uninstall: scipy\n",
      "    Found existing installation: scipy 1.11.1\n",
      "    Uninstalling scipy-1.11.1:\n",
      "      Successfully uninstalled scipy-1.11.1\n",
      "  Attempting uninstall: pandas\n",
      "    Found existing installation: pandas 2.0.3\n",
      "    Uninstalling pandas-2.0.3:\n",
      "      Successfully uninstalled pandas-2.0.3\n",
      "Successfully installed FuzzyTM-2.0.9 fst-pso-1.8.1 miniful-0.0.6 numpy-1.24.4 pandas-1.5.3 pyfume-0.3.4 scipy-1.10.1 simpful-2.12.0\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "ERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\n",
      "tables 3.8.0 requires blosc2~=2.0.0, which is not installed.\n",
      "tables 3.8.0 requires cython>=0.29.21, which is not installed.\n"
     ]
    }
   ],
   "source": [
    "!pip install gensim"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "79e5d8f5",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[nltk_data] Downloading package punkt to\n",
      "[nltk_data]     C:\\Users\\91767\\AppData\\Roaming\\nltk_data...\n",
      "[nltk_data]   Unzipping tokenizers\\punkt.zip.\n",
      "[nltk_data] Downloading package wordnet to\n",
      "[nltk_data]     C:\\Users\\91767\\AppData\\Roaming\\nltk_data...\n",
      "[nltk_data] Downloading package stopwords to\n",
      "[nltk_data]     C:\\Users\\91767\\AppData\\Roaming\\nltk_data...\n",
      "[nltk_data]   Package stopwords is already up-to-date!\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import nltk\n",
    "nltk.download('punkt')\n",
    "nltk.download('wordnet')\n",
    "nltk.download('stopwords')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "6325c759",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[nltk_data] Downloading package wordnet to\n",
      "[nltk_data]     C:\\Users\\91767\\AppData\\Roaming\\nltk_data...\n",
      "[nltk_data]   Package wordnet is already up-to-date!\n",
      "[nltk_data] Downloading package omw-1.4 to\n",
      "[nltk_data]     C:\\Users\\91767\\AppData\\Roaming\\nltk_data...\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Preprocessed Text Tokens:\n",
      "['quick', 'brown', 'fox', 'jump', 'lazi', 'dog', 'test', 'document', 'text', 'preprocess']\n"
     ]
    }
   ],
   "source": [
    "#7.Use Genism to preprocess data from a sample text file, follow basic procedures like tokenization, stemming, lemmatization etc.\n",
    "import nltk\n",
    "from gensim.utils import simple_preprocess\n",
    "from gensim.parsing.preprocessing import STOPWORDS\n",
    "from nltk.stem import PorterStemmer, WordNetLemmatizer\n",
    "nltk.download('wordnet')\n",
    "nltk.download('omw-1.4')\n",
    "def preprocess_text(text):\n",
    "    tokens = simple_preprocess(text, deacc=True)  \n",
    "    tokens = [word for word in tokens if word not in STOPWORDS]\n",
    "    stemmer = PorterStemmer()\n",
    "    stemmed_tokens = [stemmer.stem(word) for word in tokens]\n",
    "    lemmatizer = WordNetLemmatizer()\n",
    "    lemmatized_tokens = [lemmatizer.lemmatize(word) for word in stemmed_tokens]\n",
    "    return lemmatized_tokens\n",
    "text_data = \"The quick brown fox jumps over the lazy dog. This is a test document for text preprocessing.\"\n",
    "preprocessed_data = preprocess_text(text_data)\n",
    "print(\"Preprocessed Text Tokens:\")\n",
    "print(preprocessed_data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "e4f3dfbc",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Original Paragraph:\n",
      "Natural Language Processing is an exciting field of Artificial Intelligence. It involves enabling machines to understand and process human languages.\n",
      "\n",
      "Tokenized Sentences:\n",
      "['Natural Language Processing is an exciting field of Artificial Intelligence.', 'It involves enabling machines to understand and process human languages.']\n",
      "\n",
      "Tokenized Words:\n",
      "['Natural', 'Language', 'Processing', 'is', 'an', 'exciting', 'field', 'of', 'Artificial', 'Intelligence', '.', 'It', 'involves', 'enabling', 'machines', 'to', 'understand', 'and', 'process', 'human', 'languages', '.']\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[nltk_data] Downloading package punkt to\n",
      "[nltk_data]     C:\\Users\\91767\\AppData\\Roaming\\nltk_data...\n",
      "[nltk_data]   Package punkt is already up-to-date!\n"
     ]
    }
   ],
   "source": [
    "#8.Tokenizes a sample paragraph into words and sentences.\n",
    "import nltk\n",
    "nltk.download('punkt')\n",
    "def tokenize_text(paragraph):\n",
    "    \"\"\"\n",
    "    Tokenizes the input paragraph into sentences and words.\n",
    "    \n",
    "    Args:\n",
    "        paragraph (str): The input text to be tokenized.\n",
    "\n",
    "    Returns:\n",
    "        tuple: A tuple containing a list of sentences and a list of words.\n",
    "    \"\"\"\n",
    "    sentences = nltk.sent_tokenize(paragraph)\n",
    "    words = nltk.word_tokenize(paragraph)\n",
    "    return sentences, words\n",
    "if __name__ == \"__main__\":\n",
    "    sample_paragraph = (\n",
    "        \"Natural Language Processing is an exciting field of Artificial Intelligence. \"\n",
    "        \"It involves enabling machines to understand and process human languages.\"\n",
    "    )\n",
    "    sentences, words = tokenize_text(sample_paragraph)\n",
    "    print(\"Original Paragraph:\")\n",
    "    print(sample_paragraph)\n",
    "    print(\"\\nTokenized Sentences:\")\n",
    "    print(sentences)\n",
    "    print(\"\\nTokenized Words:\")\n",
    "    print(words)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "d79b25fb",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Original Text: Hello, World! Welcome to NLP 101.\n",
      "Cleaned Text: hello world welcome to nlp 101\n"
     ]
    }
   ],
   "source": [
    "#9.Write a Python function to clean a given text by removing special characters and converting it to lowercase. Test it with the input: 'Hello, World! Welcome to NLP 101.'\n",
    "import re\n",
    "def clean_text(text):\n",
    "    \"\"\"\n",
    "    Cleans the input text by:\n",
    "    1. Removing special characters.\n",
    "    2. Converting the text to lowercase.\n",
    "\n",
    "    Parameters:\n",
    "        text (str): The input text to clean.\n",
    "\n",
    "    Returns:\n",
    "        str: The cleaned text.\n",
    "    \"\"\"\n",
    "    cleaned_text = re.sub(r'[^a-zA-Z0-9\\s]', '', text)\n",
    "    cleaned_text = cleaned_text.lower()\n",
    "    return cleaned_text\n",
    "input_text = 'Hello, World! Welcome to NLP 101.'\n",
    "cleaned_text = clean_text(input_text)\n",
    "print(\"Original Text:\", input_text)\n",
    "print(\"Cleaned Text:\", cleaned_text)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "ad109968",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['support@example.com', 'sales@example.org']\n"
     ]
    }
   ],
   "source": [
    "#10.Write a Python function using regular expressions to extract all email addresses from a given string. Test it with the input: 'Contact us at support@example.com and sales@example.org.'\n",
    "import re\n",
    "def extract_emails(text):\n",
    "    \"\"\"\n",
    "    Extract all email addresses from the given string using regular expressions.\n",
    "\n",
    "    Parameters:\n",
    "        text (str): The input string containing email addresses.\n",
    "\n",
    "    Returns:\n",
    "        list: A list of email addresses found in the input string.\n",
    "    \"\"\"\n",
    "    email_pattern = r'[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}'\n",
    "    return re.findall(email_pattern, text)\n",
    "\n",
    "input_text = 'Contact us at support@example.com and sales@example.org.'\n",
    "extracted_emails = extract_emails(input_text)\n",
    "print(extracted_emails)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f75cb42c",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[nltk_data] Downloading package punkt to\n",
      "[nltk_data]     C:\\Users\\91767\\AppData\\Roaming\\nltk_data...\n",
      "[nltk_data]   Package punkt is already up-to-date!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter a text: Suharshitha\n",
      "suharshitha: 1\n",
      "Extracted emails: []\n",
      "Tokenized words: ['Suharshitha']\n",
      "Tokenized sentences: ['Suharshitha']\n",
      "Webpage title: Example Domain\n"
     ]
    }
   ],
   "source": [
    "#11.Write a Python script to fetch and print the title of a webpage using the 'requests' and 'BeautifulSoup' libraries. Test it with the URL: 'https://example.com'.\n",
    "import re\n",
    "import requests\n",
    "from bs4 import BeautifulSoup\n",
    "from collections import Counter\n",
    "import nltk\n",
    "from nltk.tokenize import word_tokenize, sent_tokenize\n",
    "\n",
    "# Ensure necessary NLTK resources are available\n",
    "nltk.download('punkt')\n",
    "\n",
    "def word_frequency(text):\n",
    "    # Convert text to lowercase and split into words\n",
    "    words = text.lower().split()\n",
    "    \n",
    "    # Count frequency of each word\n",
    "    word_counts = Counter(words)\n",
    "    \n",
    "    # Print words and their frequencies\n",
    "    for word, count in word_counts.items():\n",
    "        print(f\"{word}: {count}\")\n",
    "\n",
    "def extract_emails(text):\n",
    "    # Regular expression pattern for email addresses\n",
    "    email_pattern = r'\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b'\n",
    "    return re.findall(email_pattern, text)\n",
    "\n",
    "def tokenize_text(text):\n",
    "    words = word_tokenize(text)\n",
    "    sentences = sent_tokenize(text)\n",
    "    return words, sentences\n",
    "\n",
    "def fetch_webpage_title(url):\n",
    "    response = requests.get(url)\n",
    "    soup = BeautifulSoup(response.text, 'html.parser')\n",
    "    return soup.title.string if soup.title else \"No title found\"\n",
    "\n",
    "# Example usage\n",
    "if __name__ == \"__main__\":\n",
    "    text = input(\"Enter a text: \")\n",
    "    word_frequency(text)\n",
    "    emails = extract_emails(text)\n",
    "    print(\"Extracted emails:\", emails)\n",
    "    words, sentences = tokenize_text(text)\n",
    "    print(\"Tokenized words:\", words)\n",
    "    print(\"Tokenized sentences:\", sentences)\n",
    "    \n",
    "    url = \"https://example.com\"\n",
    "    print(\"Webpage title:\", fetch_webpage_title(url))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "88e815af",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting wordcloud\n",
      "  Obtaining dependency information for wordcloud from https://files.pythonhosted.org/packages/00/09/abb305dce85911b8fba382926cfc57f2f257729e25937fdcc63f3a1a67f9/wordcloud-1.9.4-cp311-cp311-win_amd64.whl.metadata\n",
      "  Downloading wordcloud-1.9.4-cp311-cp311-win_amd64.whl.metadata (3.5 kB)\n",
      "Requirement already satisfied: numpy>=1.6.1 in c:\\users\\91767\\anaconda3\\lib\\site-packages (from wordcloud) (1.24.4)\n",
      "Requirement already satisfied: pillow in c:\\users\\91767\\anaconda3\\lib\\site-packages (from wordcloud) (9.4.0)\n",
      "Requirement already satisfied: matplotlib in c:\\users\\91767\\anaconda3\\lib\\site-packages (from wordcloud) (3.7.2)\n",
      "Requirement already satisfied: contourpy>=1.0.1 in c:\\users\\91767\\anaconda3\\lib\\site-packages (from matplotlib->wordcloud) (1.0.5)\n",
      "Requirement already satisfied: cycler>=0.10 in c:\\users\\91767\\anaconda3\\lib\\site-packages (from matplotlib->wordcloud) (0.11.0)\n",
      "Requirement already satisfied: fonttools>=4.22.0 in c:\\users\\91767\\anaconda3\\lib\\site-packages (from matplotlib->wordcloud) (4.25.0)\n",
      "Requirement already satisfied: kiwisolver>=1.0.1 in c:\\users\\91767\\anaconda3\\lib\\site-packages (from matplotlib->wordcloud) (1.4.4)\n",
      "Requirement already satisfied: packaging>=20.0 in c:\\users\\91767\\anaconda3\\lib\\site-packages (from matplotlib->wordcloud) (23.1)\n",
      "Requirement already satisfied: pyparsing<3.1,>=2.3.1 in c:\\users\\91767\\anaconda3\\lib\\site-packages (from matplotlib->wordcloud) (3.0.9)\n",
      "Requirement already satisfied: python-dateutil>=2.7 in c:\\users\\91767\\anaconda3\\lib\\site-packages (from matplotlib->wordcloud) (2.8.2)\n",
      "Requirement already satisfied: six>=1.5 in c:\\users\\91767\\anaconda3\\lib\\site-packages (from python-dateutil>=2.7->matplotlib->wordcloud) (1.16.0)\n",
      "Downloading wordcloud-1.9.4-cp311-cp311-win_amd64.whl (299 kB)\n",
      "   ---------------------------------------- 0.0/299.9 kB ? eta -:--:--\n",
      "   - -------------------------------------- 10.2/299.9 kB ? eta -:--:--\n",
      "   --- ----------------------------------- 30.7/299.9 kB 435.7 kB/s eta 0:00:01\n",
      "   ---------------------------------------  297.0/299.9 kB 3.1 MB/s eta 0:00:01\n",
      "   ---------------------------------------- 299.9/299.9 kB 2.7 MB/s eta 0:00:00\n",
      "Installing collected packages: wordcloud\n",
      "Successfully installed wordcloud-1.9.4\n"
     ]
    }
   ],
   "source": [
    "!pip install wordcloud"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "858bb66f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "WordCloud saved as wordcloud.png\n"
     ]
    }
   ],
   "source": [
    "#12.Write a Python script to generate a WordCloud from the text: 'data science machine learning artificial intelligence'. Save the WordCloud as an image.\n",
    "from wordcloud import WordCloud\n",
    "import matplotlib.pyplot as plt\n",
    "text = 'data science machine learning artificial intelligence'\n",
    "wordcloud = WordCloud(width=800, height=400, background_color='white').generate(text)\n",
    "output_image = 'wordcloud.png'\n",
    "wordcloud.to_file(output_image)\n",
    "plt.figure(figsize=(10, 5))\n",
    "plt.imshow(wordcloud, interpolation='bilinear')\n",
    "plt.axis('off')\n",
    "plt.show()\n",
    "print(f\"WordCloud saved as {output_image}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "246d7ace",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Token\tPOS\tExplanation\n",
      "------------------------------\n",
      "NLP\tPROPN\tPROPN\n",
      "is\tAUX\tAUX\n",
      "amazing\tADJ\tADJ\n",
      "and\tCCONJ\tCCONJ\n",
      "fun\tADJ\tADJ\n",
      "to\tPART\tPART\n",
      "learn\tVERB\tVERB\n",
      ".\tPUNCT\tPUNCT\n"
     ]
    }
   ],
   "source": [
    "#13.Write a Python script to perform part-of-speech tagging on the sentence: 'NLP is amazing and fun to learn.' using SpaCy.\n",
    "import spacy\n",
    "nlp = spacy.load(\"en_core_web_sm\")\n",
    "sentence = \"NLP is amazing and fun to learn.\"\n",
    "doc = nlp(sentence)\n",
    "print(\"Token\\tPOS\\tExplanation\")\n",
    "print(\"-\" * 30)\n",
    "for token in doc:\n",
    "    print(f\"{token.text}\\t{token.pos_}\\t{token.pos_}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c13698b9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
